#include "atomic"
#include "iostream"
#include "functional"

template <typename T>
void CustomDeleter (T* ptr) {
    // hold a ptr
    delete ptr;
}

template<typename T>
class shared_ptr {
    // 声明一个模板类是其自身的友元类
template<typename U> 
    friend class shared_ptr;
public:

    // raw ptr constructor
    explicit shared_ptr(T* ptr = nullptr, DeleterFunc deleter = nullptr) : 
    ptr_(ptr), count_(new std::atomic<std::size_t>(1)), deleter_(deleter)
    {
        std::cout <<  "raw constructor" << &ptr_ <<std::endl;
    }
    
    // another shared_ptr
    shared_ptr(const shared_ptr& other) : 
    ptr_(other.ptr_), count_(other.count_), deleter_(other.deleter) 
    {
        ++*count_;
    }
    
    // generalized copy constructor
    template <typename U>
    explicit shared_ptr(const shared_ptr<U>& other) : 
    ptr_(other.ptr_), count_(other.count_), deleter_(other.deleter)
    {
        ++*count_;
        std::cout <<  "copy constructor" << &ptr_ <<std::endl;
    }
    
    // destructor
    // extra if
    ~shared_ptr() {
        // == release
        if (--*count_ == 0) {
            if (deleter_){
                deleter(ptr_);
            } else{
                delete ptr_;
            }      
            delete count_;
        }
    }

    // 纯纯CAS
    shared_ptr& operator=(const shared_ptr& other) {
        shared_ptr(other).swap(*this);
        std::cout <<  "copy assignment" << &ptr_ <<std::endl;
//            shared_ptr<T, deleter> sh(std::forward(other));
//            std::swap(ptr, sh.ptr);
//            std::swap(count, sh.count);
        return *this;
    }

    // move constructor
    shared_ptr(shared_ptr&& other) noexcept : ptr_(other.ptr_), count_(other.count_) {
        other.ptr_ = nullptr;
        other.count_ = new std::atomic<std::size_t>(1);
        std::cout <<  "move constructor" << &ptr_ <<std::endl;
    }

    // move assignment
    shared_ptr& operator=(shared_ptr&& other) noexcept {
        shared_ptr(std::move(other)).swap(*this);
//            shared_ptr<T, deleter> sh(std::forward(other));
//            std::swap(ptr, sh.ptr);
//            std::swap(count, sh.count);
        return *this;
    }

private:
    // essential
    void release() {
        if (--*count_ == 0) {
            if (deleter_){
                deleter(ptr_);
            } else{
                delete ptr_;
            }      
            delete count_;
        }
    }
    
    // essential
    void swap(shared_ptr& other) noexcept {
        using std::swap;    // key!
        swap(ptr_, other.ptr_);
        swap(count_, other.count_);
    }
   
    // handle nullptr and ptr
    void reset(T* ptr = nullptr) noexcept {
        if (ptr != nullptr) { std::cout << "reset: ptr" << std::endl;}
        else { std::cout << "reset: nullptr" << std::endl;}
        shared_ptr(ptr).swap(*this);
    }

    // use like raw pointer
    T& operator*() const { return *ptr_; }
    T* operator->() const { return ptr_; }
    
    std::size_t use_count() const { return ptr_ == nullptr? 0: count_->load(); }
    // 将shared_ptr对象隐式的转化为布尔值
    explicit operator bool() const { return ptr_ != nullptr; }

    bool unique() const {
        return use_count() == 1;
    }

    template<typename... Args>
    shared_ptr<T> make_shared(Args&&... args){
        // 已经分配好了内存，被T*指着
        shared_ptr<T> sp(new T(std::forward<Args>(args)...));
        return sp;
    }

private:
    T* ptr_;
    std::atomic<std::size_t>* count_;
    DeleterFunc deleter_;
};
